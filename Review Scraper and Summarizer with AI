import asyncio
import os
import google.generativeai as genai
from pyppeteer import launch


async def scrape_reviews(url):
    reviews = []
    browser = await launch(headless=True, args=['--window-size=800,3200'])

    page = await browser.newPage()
    await page.setViewport({'width': 800, 'height': 3200})
    await page.goto(url)
    await page.waitForSelector('.jftiEf', {'timeout': 10000})

    elements = await page.querySelectorAll('.jftiEf')
    for element in elements:
        more_btn = await element.querySelector('.w8nwRe')
        if more_btn is not None:
            await page.evaluate('(button) => button.click()', more_btn)
            await page.waitFor(5000)

        snippet = await element.querySelector('.MyEned')
        if snippet:
            text = await page.evaluate('(selected) => selected.textContent', snippet)
            reviews.append(text)

    await browser.close()
    return reviews


def summarize(reviews, model):
    prompt = ("I collected some reviews of a place I was considering visiting. \
        Can you summarize the reviews for me? I want to generally know what people like and dislike. The reviews are below:\n")
    for review in reviews:
        prompt += "\n" + review

    print("Prompt for Generative AI model:")
    print(prompt)

    # Generate summary
    completion = genai.generate_text(
        model=model,
        prompt=prompt,
        temperature=0,
        max_output_tokens=300
    )

    print("Summary of Reviews:")
    return completion.result


# Replace this with your valid API key
os.environ['API_key'] = "AIzaSyB_8SZda1d7aEiRot4fOAJlcq8srG1AZhI"
genai.configure(api_key=os.environ['API_key'])

# Fetch available models
models = [
    m for m in genai.list_models() if 'generateText' in m.supported_generation_methods
]
model = models[0].name

url = input("Enter a url: ")
reviews = asyncio.get_event_loop().run_until_complete(scrape_reviews(url))

result = summarize(reviews, model)
print(result)
